# This code  is related to the article
# Meyer and Wintenberger, "Detection of extremal directions via Euclidean projections"

library(rlang)

list_of_thresholds <- function(v){
  # This function gives the list of all thresholds for which
  # the vector v has a different number of nonnull coordinates
  d <- length(v)
  u <- sort(v, TRUE)
  threshold <- rep(0,d)
  su <- cumsum(u)
  
  for(k in 1:(d-1)){
    threshold[k] <- su[k]-k*u[k+1]}
  threshold[d] <- su[d] # threshold above which the projection does not make sense
  
  return(threshold)
}

cones_function <- function(v, Gamma){
  # This function gives the subsets which contains the mass of Z
  # with Gamma by decreasing order
  d <- length(v)
  ord <- order(v)
  thres <- list_of_thresholds(v)
  length_Gamma <- length(Gamma)
  
  J <- which(Gamma < thres[d], arr.ind = TRUE) # the coordinates of the useful Gamma
  length_J <- length(J)
  # the one that are too big provide a vector of NA
  
  cones <- matrix(NA, nrow = d, ncol = length_Gamma)
  if (length_J > 0){
    # Initialization
    j <- J[1]
    r1 <- sum(thres<Gamma[j]) + 1 # number of positive coordinates for the threshold Gamma[1]
    cones[ord[1:(d-r1)], j] <- 0 # the coordinates on which v is not projected
    cones[ord[seq2(d-r1+1, d)], j] <- 1 # the coordinates on which v is projected
    
    j <- J[2]
    r2 <- d+2 # just need to be above d+1 I think
  }
  
  if (length_J > 1){
    # the loop
    while ((r2 >= 1)&&(j<=length_Gamma)) {
      r2 <- sum(thres<Gamma[j]) + 1 # number of positive coordinates for the threshold Gamma[1]
      if (r2 <= d){
        cones[ , j] <- cones[ , j-1]
        cones[ord[seq2(d-r1+1, d-r2)], j] <- 0 # seq2 only works for increasing sequence which helps if r1 < r2
      } # we let the NA if the Gamma[1] is too huge
      j <- j + 1
      r1 <- r2
    }
  }
  return(cones)
}

occ_subsets <- function(testmtx){
  # This function takes a matrix and gives the number of occurence of each column
  nc <- ncol(testmtx)
  occ <- seq(nc)  
  for (i in seq(nc-1)) {
    dup <- colSums( abs( testmtx[,seq(i+1,nc),drop=F] - testmtx[,i] ) ) == 0
    occ[which(dup)+i] <- occ[i]
  }
  result <- rbind(testmtx[ ,unique(occ)], table(occ))
  colnames(result) <- NULL
  return(result)
}

algo_sparse <- function(X, K, p){
  # This algo takes a matrix of data X, a list of levels K, and a threshold parameter p,
  # and gives the subsets on which the projection puts mass
  n <- ncol(X)
  d <- nrow(X)
  length_K <- length(K) # K should be given in an increasing order
  
  sum_norm <- apply(X, 2, sum)
  sort_sum_norm <- sort(sum_norm, decreasing = TRUE)
  thresholds <- sort_sum_norm[K+1]
  X <- X[ , sum_norm>thresholds[length_K]]
  
  # Initializations: the "adjacency matrix"
  binary <- apply(X, 2, cones_function, thresholds)
  result <- list() # the return list
  
  for (j in 1:length_K){
    binary_bis <- binary[( (j-1)*d + 1 ): (j*d) , !is.na(binary[(j-1)*d+1, ]) ]
    M <- occ_subsets(binary_bis)
    ordered_subcones <- order(M[d+1, ], decreasing=TRUE) # we order the matrix M in increasing order
    M <- as.matrix(M[ , ordered_subcones])
    
    # we keep the most represented subsets
    relevant <- M[d+1, ] > p*K[j]/ncol(M)
    result[[j]] <- as.matrix(M[ ,relevant])
  }
  return(result)
}

rank_trans <- function(v){
  # the rank transform
  n <- length(v)
  res <- rep(0,n)
  res[order(v)] <- n/(n:1)
  return(res)
}

# The Damex code
# Epsilon-thickened rectangles, cf Goix, Sabourin, Clemencon
algo_damex <- function(X, K, p, epsilon){
  n <- ncol(X)
  d <- nrow(X)
  length_K <- length(K) # K should be given in an increasing order
  max_norm <- apply(X, 2, max)
  X_rt <- t(apply(X, 1, rank_trans)) # rank transform
  
  result <- list() # the return list
  
  for (j in 1:length_K){
    k <- K[j]
    binary <- (X_rt[ , max_norm > n/k ] - n/k*epsilon > 0)*1 # the epsilon-thickened rectangles
    M <- occ_subsets(binary)
    ordered_subcones <- order(M[d+1, ], decreasing=TRUE) # we order the matrix M in the increasing order
    M <- as.matrix(M[ , ordered_subcones])
    
    # we keep the most represented subsets
    relevant <- M[d+1, ] > p*sum(M[d+1, ])/ncol(M)
    result[[j]] <- as.matrix(M[, relevant])
  }
  return(result)
}

