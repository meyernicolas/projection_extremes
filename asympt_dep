# A second example: Asymtptotic dependence

rm(list = ls())
#setwd("/Users/nicolasmeyer/Dropbox/olivier/articles/sparse_regular_variation/v3/code")
source(file = "sparse_regular_variation.R")
# "sparse_regular_variation.R" corresponds to auxiliary_functions

set.seed(234)

N <- 100 # number of simulations
n <- c(10^4, 5*10^4, 10^5)
length_n <- length(n)
K <- sqrt(n)
epsilon <- c(0.05, 0.1, 0.5)
length_eps <- length(epsilon)

error <- matrix(rep(0, length_n*2*(length_eps+1)), nrow = length_n) # the error vector
colnames(error) <- paste( rep( c("sparse", paste("e=",epsilon)), each=2 ), rep( c("T1", "T2"), length_eps+1) )
rownames(error) <- paste("n=", n)

d <- 50
s2 <- 10 # number of two-dimensional subsets
s3 <- 10 # number of three-dimensional subsets
s <- s2 + s3 # total number of subsets

M_theor <- matrix( rep(0, d*s), ncol = s, nrow = d)
for (j in 1:s2){
  M_theor[(2*j-1):(2*j) ,j] <- 1
}
for (j in 1:s3){
  M_theor[2*s2 + (3*j-2):(3*j), j+s2] <- 1
}
# Our aim is to recover the s2 = 10 two-dimensional + s3 = 10 three-dimensional subsets

for (r in 1:length_n){
  for (l in 1:N){
    
    X <- matrix(rep(0, n[r]*d), nrow = d)
    for (i in 1:s2){
      # the construction of the data matrix
      A <- 1/runif(n[r]) # pareto(1)
      B <- A + 1/runif(n[r])^(1/2) # the same pareto + a pareto(2)
      X[(2*i-1):(2*i), ] <- rbind(A,B)
    }
    for (i in 1:s3){
      # the construction of the data matrix
      A <- 1/runif(n[r]) # pareto(1)
      B <- A + 1/runif(n[r])^(1/2) # the same pareto + a pareto(2)
      C <- A + 1/runif(n[r])^(1/2) # the same pareto + a pareto(2)
      X[2*s2 + (3*i-2):(3*i), ] <- rbind(A,B,C)
    }
    
    # alpha = 1
    sparse <- algo_sparse(X, K[r], p = 0.3)
    M_result <- as.matrix(sparse[[1]][-(d+1), ])
    error[r,1] <- error[r,1] + sum( tail( !duplicated( rbind(t(M_theor), t(M_result)) ), ncol(M_result) ) ) # those who should not be here
    error[r,2] <- error[r,2] + sum( tail( !duplicated( rbind(t(M_result), t(M_theor)) ), ncol(M_theor) ) ) # those who are missing
    
    # alpha = 2
    sparse_2 <- algo_sparse(X^2, K[r], p = 0.3)
    M_result <- as.matrix(sparse_2[[1]][-(d+1), ])
    error[r,3] <- error[r,3] + sum( tail( !duplicated( rbind(t(M_theor), t(M_result)) ), ncol(M_result) ) ) # those who should not be here
    error[r,4] <- error[r,4] + sum( tail( !duplicated( rbind(t(M_result), t(M_theor)) ), ncol(M_theor) ) ) # those who are missing
    
    # alpha = 1/2
    sparse_sq2 <- algo_sparse(X^(1/2), K[r], p = 0.3)
    M_result <- as.matrix(sparse_sq2[[1]][-(d+1), ])
    error[r,5] <- error[r,5] + sum( tail( !duplicated( rbind(t(M_theor), t(M_result)) ), ncol(M_result) ) ) # those who should not be here
    error[r,6] <- error[r,6] + sum( tail( !duplicated( rbind(t(M_result), t(M_theor)) ), ncol(M_theor) ) ) # those who are missing

    
    damex <- list()
    for (j in 1:length_eps){
    damex[[j]] <- algo_damex(X, K[r], p = 0.3, epsilon[j])
    M_result <- as.matrix(damex[[j]][[1]][ -(d+1), ])
    error[r, 2*j+5] <- error[r, 2*j+5] + sum( tail( !duplicated( rbind(t(M_theor), t(M_result)) ), ncol(M_result) ) ) # those who should not be here
    error[r, 2*j+6] <- error[r, 2*j+6] + sum( tail( !duplicated( rbind(t(M_result), t(M_theor)) ), ncol(M_theor) ) ) # those who are missing
    }

  }
}
error/N
